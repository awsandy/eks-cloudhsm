
data "aws_iam_policy_document" "cloudhsm_serviceaccount_assume" {
  statement {
    actions = [
      "sts:AssumeRoleWithWebIdentity",
    ]
    condition {
      test     = "StringEquals"
      variable = data.terraform_remote_state.cluster.outputs.cluster.oidc.subject
      values = [
        "system:serviceaccount:*:${format(module.account.resource_name.format, "cloudhsm-svcacct-role")}"
      ]
    }
    
    principals {
      type = "Federated"
      identifiers = [
        data.terraform_remote_state.cluster.outputs.cluster.oidc.arn,
      ]
    }
  }
}

data "aws_iam_policy_document" "cloudhsm_serviceaccount_document" {
  statement {
    sid    = "keystore"
    effect = "Allow"

    actions = [
      "s3:GetObject",
    ]

    resources = ["arn:aws:s3:::hsm-keystore/hsm-keystore.p12"]
  }

  statement {
    sid    = "clusterparameters"
    effect = "Allow"

    actions = [
      "ssm:GetParameter",
    ]

    resources = ["arn:aws:ssm:eu-west-2:${module.account.id}:parameter/mgmt/cloudhsm/*"]
  }
}

resource "aws_iam_role" "cloudhsm_serviceaccount_role" {
  name               = format(module.account.resource_name.format, "cloudhsm-svcacct-role")
  assume_role_policy = data.aws_iam_policy_document.cloudhsm_serviceaccount_assume.json

  tags = merge(module.account.tags, {
    Name = format(module.account.tag_name.format, "CLOUDHSM-SVCACCT-ROLE")
  })

  lifecycle {
    ignore_changes = [
      tags["CreatedActor"]
    ]
  }
}

resource "aws_iam_role_policy" "cloudhsm_serviceaccount_policy" {
  name   = format(module.account.resource_name.format, "cloudhsm-svc-acct-policy")
  role   = aws_iam_role.cloudhsm_serviceaccount_role.id
  policy = data.aws_iam_policy_document.cloudhsm_serviceaccount_document.json

}